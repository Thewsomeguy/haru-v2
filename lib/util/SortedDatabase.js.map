{"version":3,"sources":["util/SortedDatabase.es6"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;IAEM,c;AACJ,0BAAa,GAAb,EAAkB,OAAlB,EAA2B;AAAA;;AACzB,cAAU,WAAW,2BAAQ,eAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,mBAAzB,CAAR,CAArB;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,MAAL,GAAc,gBAAM,YAAN,CAAmB,QAAQ,MAAR,EAAnB,CAAd;AACD;;;;4BAEQ,E,EAAI,G,EAAK,G,EAAK;AACrB,UAAI,OAAO,EAAP,KAAc,UAAlB,EAA8B;AAC5B,YAAI,GAAJ,EAAS,OAAO,GAAG,GAAH,EAAQ,GAAR,CAAP;AACT,eAAO,GAAG,IAAH,EAAS,GAAT,CAAP;AACD;AACF;;;wBAEI,M,EAAQ,K,EAAO,E,EAAI;AAAA;;AACtB,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,GAAtB,EAA2B,SAAS,KAAT,EAAgB,EAAhB,CAA3B,EAAgD,MAAhD,EAAwD,UAAC,GAAD,EAAM,GAAN,EAAc;AACpE,eAAO,MAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;wBAEI,M,EAAQ,E,EAAI;AAAA;;AACf,WAAK,MAAL,CAAY,MAAZ,CAAmB,KAAK,GAAxB,EAA6B,MAA7B,EAAqC,UAAC,GAAD,EAAM,GAAN,EAAc;AACjD,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;wBAEI,M,EAAQ,E,EAAI;AAAA;;AACf,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,GAAtB,EAA2B,MAA3B,EAAmC,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/C,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;yBAEK,M,EAAQ,K,EAAM,E,EAAI;AAAA;;AACtB,WAAK,MAAL,CAAY,OAAZ,CAAoB,KAAK,GAAzB,EAA8B,SAAS,KAAT,EAAe,EAAf,CAA9B,EAAkD,MAAlD,EAA0D,UAAC,GAAD,EAAM,GAAN,EAAc;AACtE,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;6BAES,K,EAAO,E,EAAI;AAAA;;AACnB,WAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,GAAvB,EAA4B,UAAC,GAAD,EAAM,GAAN,EAAc;AACxC,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;sCAEkB,M,EAAQ,E,EAAI;AAAA;;AAC7B,WAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,GAAvB,EAA4B,MAA5B,EAAoC,UAAC,GAAD,EAAM,GAAN,EAAc;AAChD,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;uCAEmB,M,EAAQ,E,EAAI;AAAA;;AAC9B,WAAK,MAAL,CAAY,QAAZ,CAAqB,KAAK,GAA1B,EAA+B,MAA/B,EAAuC,UAAC,GAAD,EAAM,GAAN,EAAc;AACnD,eAAO,OAAK,OAAL,CAAa,EAAb,EAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACD,OAFD;AAGD;;;;;;AAGH,OAAO,OAAP,GAAiB,cAAjB","file":"util/SortedDatabase.js","sourcesContent":["import redis from 'redis'\nimport path from 'path'\n\nimport FDB from './FlatDatabase'\n\nclass SortedDatabase {\n  constructor (key, options) {\n    options = options || new FDB(path.join(process.cwd(), 'config/redis.json'))\n    this.key = key\n    this.client = redis.createClient(options.getAll())\n  }\n\n  _handle (cb, err, res) {\n    if (typeof cb === 'function') {\n      if (err) return cb(err, res)\n      return cb(null, res)\n    }\n  }\n\n  set (member, score, cb) {\n    this.client.zadd(this.key, parseInt(score, 10), member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  get (member, cb) {\n    this.client.zscore(this.key, member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  del (member, cb) {\n    this.client.zrem(this.key, member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  incr (member, incr, cb) {\n    this.client.zincrby(this.key, parseInt(incr, 10), member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  getTotal (field, cb) {\n    this.client.zcard(this.key, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  getRankFromLowest (member, cb) {\n    this.client.zrank(this.key, member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n\n  getRankFromHighest (member, cb) {\n    this.client.zrevrank(this.key, member, (err, res) => {\n      return this._handle(cb, err, res)\n    })\n  }\n}\n\nmodule.exports = SortedDatabase\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}