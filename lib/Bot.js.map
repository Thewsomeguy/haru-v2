{"version":3,"sources":["Bot.coffee"],"names":[],"mappings":"AAAA,IAAA;;AAAA,cAAA,GAAiB,OAAA,CAAQ,kBAAR;;AACjB,KAAA,GAAQ,OAAA,CAAQ,OAAR;;AACR,IAAA,GAAO,OAAA,CAAQ,MAAR;;AAEP,SAAA,GAAY,OAAA,CAAQ,kBAAR;;AACZ,GAAA,GAAM,OAAA,CAAQ,qBAAR;;AACN,MAAA,GAAS,OAAA,CAAQ,mBAAR;;AACT,MAAA,GAAS,OAAA,CAAQ,mBAAR;;AAEH;EACS,aAAC,MAAD;AACX,QAAA;IAAA,MAAA,GAAS,MAAA,IAAc,IAAA,GAAA,CAAI,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,GAAR,CAAA,CAAV,EAAyB,qBAAzB,CAAJ;IACvB,QAAA,GAAW,IAAC,CAAA,aAAD,CAAA;IACX,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CACA,CAAC,IADD,CACM,CAAA,SAAA,KAAA;aAAA,SAAA;eACJ,KAAC,CAAA,SAAD,GAAa,KAAC,CAAA,cAAD,CAAgB,MAAhB;MADT;IAAA,CAAA,CAAA,CAAA,IAAA,CADN,CAGA,CAAC,OAAD,CAHA,CAGO,SAAC,GAAD;aACL,IAAC,CAAA,MAAM,CAAC,KAAR,CAAc,wBAAd,EAAwC,GAAxC;IADK,CAHP;EAHW;;gBASb,aAAA,GAAe,SAAA;AACb,QAAA;IAAA,QAAA,GAAW,cAAA,CAAA,CACX,CAAC,WADU,CACE;MACX,QAAA,EAAU,GADC;MAEX,QAAA,EAAU,EAFC;MAGX,OAAA,EAAS,KAHE;KADF,CAMX,CAAC,WANU,CAME,CACX,OADW,EAEX,QAFW,CANF,CAUX,CAAC,eAVU,CAUM,QAVN,EAUgB,QAVhB,CAWX,CAAC,eAXU,CAWM,QAXN,EAWgB,OAXhB,CAYX,CAAC,eAZU,CAYM,OAZN,EAYe,QAZf,CAaX,CAAC,eAbU,CAaM,OAbN,EAae,SAbf;WAcX;EAfa;;gBAiBf,cAAA,GAAgB,SAAC,MAAD;IACd,IAAC,CAAA,MAAD,GAAc,IAAA,MAAA,CAAO,MAAO,CAAA,OAAA,CAAd;IACd,IAAC,CAAA,SAAD,GAAiB,IAAA,SAAA,CAAU;MACzB,MAAA,EAAQ,IAAC,CAAA,MADgB;MAEzB,MAAA,EAAQ,MAFiB;KAAV;WAIjB,IAAC,CAAA,GAAD,CAAA;EANc;;gBAQhB,GAAA,GAAK,SAAA;AACH,QAAA;IAAA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,CAAA,WAAA,GAAW,CAAC,KAAK,CAAC,IAAN,CAAW,MAAX,CAAD,CAAX,GAA8B,GAA9B,CAAA,GACb,CAAA,GAAA,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAZ,IAAmC,OAApC,CAAH,CADA;IAEA,MAAA,GAAa,IAAA,MAAA,CAAO,IAAC,CAAA,SAAR;IACb,MAAM,CAAC,KAAP,CAAA;WACA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,SAAA;aACjB,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,sCAAb;IADiB,CAAnB;EALG;;;;;;AAQP,MAAM,CAAC,OAAP,GAAiB","file":"Bot.js","sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src","sourcesContent":["createResolver = require 'options-resolver'\nchalk = require 'chalk'\npath = require 'path'\n\nContainer = require './util/Container'\nFDB = require './util/FlatDatabase'\nLogger = require './services/Logger'\nLoader = require './services/Loader'\n\nclass Bot\n  constructor: (params) ->\n    params = params || new FDB(path.join process.cwd(), 'config/discord.json')\n    resolver = @buildResolver()\n    resolver.resolve(params)\n    .then(=>\n      @container = @buildContainer(params))\n    .catch((err) ->\n      @logger.error 'Error resolving params', err)\n\n  buildResolver: ->\n    resolver = createResolver()\n    .setDefaults({\n      'prefix': '!'\n      'admins': []\n      'debug': false\n    })\n    .setRequired([\n      'token'\n      'prefix'\n    ])\n    .setAllowedTypes('prefix', 'string')\n    .setAllowedTypes('admins', 'array')\n    .setAllowedTypes('token', 'string')\n    .setAllowedTypes('debug', 'boolean')\n    resolver\n\n  buildContainer: (params) ->\n    @logger = new Logger(params['debug'])\n    @container = new Container({\n      logger: @logger\n      params: params\n    })\n    @run()\n\n  run: ->\n    @logger.info \"Starting #{chalk.cyan 'fuyu'} \" +\n    \"v#{process.env.npm_package_version || '1.0.0'}\"\n    loader = new Loader(@container)\n    loader.start()\n    loader.on 'ready', ->\n      @logger.info 'Bot is connecting, awaiting messages'\n\nmodule.exports = Bot\n"]}