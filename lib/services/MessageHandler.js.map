{"version":3,"sources":["services/MessageHandler.coffee"],"names":[],"mappings":"AAAA,IAAA;;AAAA,IAAA,GAAO,OAAA,CAAQ,MAAR;;AACP,EAAA,GAAK,OAAA,CAAQ,aAAR;;AACL,EAAA,GAAK,OAAA,CAAQ,eAAR;;AAEC;EACS,wBAAC,SAAD,EAAa,MAAb;IAAC,IAAC,CAAA,YAAD;IAAY,IAAC,CAAA,SAAD;IACxB,IAAC,CAAA,OAAD,GAAW;IACX,IAAC,CAAA,MAAD,GAAU,IAAC,CAAA,SAAS,CAAC,GAAX,CAAe,QAAf;IACV,IAAC,CAAA,UAAD,CAAA;EAHW;;2BAKb,UAAA,GAAY,SAAA;AACV,QAAA;IAAA,IAAC,CAAA,OAAD,GAAW,EAAA,CAAG,IAAI,CAAC,IAAL,CAAU,OAAO,CAAC,GAAR,CAAA,CAAV,EAAyB,aAAzB,CAAH;AACX;SAAA,sBAAA;;;AACE;aAAA,+BAAA;UACE,IAAG,OAAO,IAAC,CAAA,OAAQ,CAAA,MAAA,CAAQ,CAAA,OAAA,CAAxB,KAAoC,QAAvC;0BACE,OAAO,IAAC,CAAA,OAAQ,CAAA,MAAA,CAAQ,CAAA,OAAA,GAD1B;WAAA,MAAA;kCAAA;;AADF;;;AADF;;EAFU;;2BAOZ,aAAA,GAAe,SAAA;IACb,EAAE,CAAC,GAAH,CAAA;WACA,IAAC,CAAA,UAAD,CAAA;EAFa;;2BAIf,MAAA,GAAQ,SAAC,GAAD;IACN,IAAG,GAAG,CAAC,MAAM,CAAC,EAAX,KAAiB,IAAC,CAAA,MAAM,CAAC,IAAI,CAAC,EAAjC;AAAyC,aAAO,MAAhD;;WACA,IAAC,CAAA,YAAD,CAAc,GAAd;EAFM;;2BAIR,YAAA,GAAc,SAAC,GAAD;AACZ,QAAA;AAAA;SAAA,sBAAA;;;AACE;aAAA,2BAAA;UACE,OAAA,GAAc,IAAA,IAAC,CAAA,OAAQ,CAAA,MAAA,CAAQ,CAAA,GAAA,CAAjB,CAAsB,GAAtB,EAA2B,IAAC,CAAA,MAA5B,EAAoC,IAAC,CAAA,SAArC;AACd;0BACE,OAAO,CAAC,MAAR,CAAA,GADF;WAAA,aAAA;YAEM;0BACJ,IAAC,CAAA,MAAM,CAAC,KAAR,CAAc,yBAAA,GAA0B,IAAC,CAAA,OAAQ,CAAA,MAAA,CAAQ,CAAA,GAAA,CAAI,CAAC,IAA9D,EAAsE,GAAtE,GAHF;;AAFF;;;AADF;;EADY;;;;;;AAShB,MAAM,CAAC,OAAP,GAAiB","file":"services/MessageHandler.js","sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src","sourcesContent":["path = require 'path'\nrq = require 'require-all'\ncr = require 'clear-require'\n\nclass MessageHandler\n  constructor: (@container, @client) ->\n    @modules = {}\n    @logger = @container.get 'logger'\n    @getModules()\n\n  getModules: ->\n    @modules = rq(path.join process.cwd(), 'lib/modules')\n    for module of @modules\n      for command of @modules[module]\n        if typeof @modules[module][command] == 'object'\n          delete @modules[module][command]\n\n  reloadModules: ->\n    cr.all()\n    @getModules()\n\n  handle: (msg) ->\n    if msg.sender.id == @client.user.id then return false\n    @checkModules msg\n\n  checkModules: (msg) ->\n    for module of @modules\n      for idx of @modules[module]\n        command = new @modules[module][idx](msg, @client, @container)\n        try\n          command.handle()\n        catch err\n          @logger.error \"Error handling command #{@modules[module][idx].name}\", err\n\nmodule.exports = MessageHandler\n"]}