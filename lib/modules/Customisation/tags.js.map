{"version":3,"sources":["modules/Customisation/tags.js"],"names":[],"mappings":"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","file":"modules/Customisation/tags.js","sourcesContent":["import BaseCommand from '../../base/BaseCommand'\nimport Database from '../../util/Database'\n\nlet TagManager = new Database('tags')\n\nclass Tags extends BaseCommand {\n  static get name () {\n    return 'tags'\n  }\n\n  static get description () {\n    return 'Save and retrieve snippets of text'\n  }\n\n  static get usage () {\n    return [\n      [\n        '```ruby',\n        '== Tag Management System ==',\n        '```',\n        'Tags allow you to save and retrieve snippets of text.',\n        'Tags are server-specific - tags you create on one server will not be found on another.\\n'\n      ].join('\\n'),\n      [\n        'tags create **<tag name>** > **<text>** - Creates a tag',\n        'tags edit **<tag name>** > **<new text>** - Edits a tag',\n        'tags delete **<tag name>** - Deletes a tag'\n      ],\n      [\n        '\\n__NOTE:__ Anyone can edit and delete tags.',\n        '**Retrieving tags**:, prefix the tag name with `>>`',\n        'For example: `>>here comes dat boi`'\n      ].join('\\n')\n    ]\n  }\n\n  get noPrivate () {\n    return true\n  }\n\n  checkEntries (entry, cb) {\n    TagManager.has(entry.id, (err, res) => {\n      if (err) {\n        this.logger.error(\n          `${this.sender.name} encountered an error querying tag`, err\n        )\n        this.reply(`Error querying for entries: ${err}`)\n        return\n      }\n      return cb(res)\n    })\n  }\n\n  getEntry (entry, cb) {\n    TagManager.get(entry.id, (err, tags) => {\n      if (err) {\n        this.logger.error(\n          `${this.sender.name} encountered an error fetching tag list`, err\n        )\n        this.reply(`Error fetching entry: ${err}`)\n        return\n      }\n      return cb(tags)\n    })\n  }\n\n  setEntry (entry, value, cb) {\n    TagManager.set(entry.id, value, err => {\n      if (err) {\n        this.logger.error(\n          `${this.sender.name} encountered an error saving an entry`, err\n        )\n        this.reply(`Error saving entry: ${err}`)\n        return\n      }\n      return cb(true)\n    })\n  }\n\n  handle () {\n    // tags : server ID / user ID : json object\n    this.responds(/^tags$/i, () => {\n      this.getEntry(this.server, tags => {\n        if (!tags) {\n          this.reply('No tags are saved on this server.')\n          return\n        }\n        this.send(this.channel, [\n          ':mag_right:  Tags saved in this server:',\n          `\\`${Object.keys(tags).join(', ')}\\``\n        ].join('\\n'))\n      })\n    })\n\n    this.responds(/^tags (create|add|\\+) .* >*$/i, () => {\n      this.send(this.channel, [\n        `To add a tag, enter __${this.prefix}tags create **<tag name>** > **<text>**__`,\n        '```',\n        `${this.prefix}tags create here comes dat boi > o shit waddup`,\n        '```'\n      ].join('\\n'))\n    })\n\n    this.responds(/^tags (create|add|\\+) (.+) > (.+)$/i, matches => {\n      let tag = matches[2]\n      let text = matches[3]\n      this.getEntry(this.server, tags => {\n        if (tags === null) {\n          let entry = {}\n          entry[tag] = text\n          this.setEntry(this.server, entry, success => {\n            if (success === true) {\n              this.send(this.channel, [\n                `:white_check_mark:  Saved tag **${tag}** with text *${text}*`,\n                `Use \\`>>${tag}\\` to access the saved text!`\n              ])\n            }\n          })\n        } else {\n          if (Object.keys(tags).indexOf(tag) > -1) {\n            this.reply([\n              `The tag **${tag}** already exists!`,\n              `To edit a tag, enter __${this.prefix}tags edit **<tag name>** > **<new text>**`\n            ])\n          } else {\n            tags[tag] = text\n            this.setEntry(this.server, tags, success => {\n              if (success === true) {\n                this.send(this.channel, [\n                  `:white_check_mark:  Saved tag **${tag}** with text *${text}*`,\n                  `Use \\`>>${tag}\\` to access the saved text!`\n                ])\n              }\n            })\n          }\n        }\n      })\n    })\n\n    this.responds(/^tags edit .* >*$/i, () => {\n      this.send(this.channel, [\n        `To edit a tag, enter __${this.prefix}tags edit **<tag name>** > **<new text>**`,\n        '```',\n        `${this.prefix}tags edit ayy > LMAO`,\n        '```',\n        '__NOTE:__ Anyone can edit tags.'\n      ].join('\\n'))\n    })\n\n    this.responds(/^tags edit (.+) > (.+)$/i, matches => {\n      let tag = matches[1]\n      let text = matches[2]\n      this.getEntry(this.server, tags => {\n        if (tags === null) {\n          this.reply([\n            `The tag **${tag}** doesn't exist!`,\n            `To create a new tag, enter __${this.prefix}tags create **<tag name>** > **<text>**__`\n          ])\n        } else {\n          if (Object.keys(tags).indexOf(tag) === -1) {\n            this.reply([\n              `The tag **${tag}** doesn't exist!`,\n              `To create a new tag, enter __${this.prefix}tags create **<tag name>** > **<text>**__`\n            ])\n          } else {\n            tags[tag] = text\n            this.setEntry(this.server, tags, success => {\n              if (success === true) {\n                this.send(this.channel, [\n                  `:white_check_mark:  Edited tag **${tag}** to text *${text}*`,\n                  `Use \\`>>${tag}\\` to access the new tag!`\n                ])\n              }\n            })\n          }\n        }\n      })\n    })\n\n    this.responds(/^tags (delete|rm|\\-)$/i, () => {\n      this.send(this.channel, [\n        `To delete a tag, enter __${this.prefix}tags delete **<tag name>**`,\n        '```',\n        `${this.prefix}tags delete here comes dat boi`,\n        '```',\n        '__NOTE:__ Anyone can delete tags.'\n      ].join('\\n'))\n    })\n\n    this.responds(/^tags (delete|rm|\\-) (.+)$/i, matches => {\n      let tag = matches[2]\n      this.getEntry(this.server, tags => {\n        if (tags === null) {\n          this.reply([\n            `The tag **${tag}** doesn't exist!`,\n            `To create a new tag, enter __${this.prefix}tags create **<tag name>** > **<text>**__`\n          ])\n        } else {\n          if (Object.keys(tags).indexOf(tag) === -1) {\n            this.reply([\n              `The tag **${tag}** doesn't exist!`,\n              `To create a new tag, enter __${this.prefix}tags create **<tag name>** > **<text>**__`\n            ])\n          } else {\n            delete tags[tag]\n            this.setEntry(this.server, tags, success => {\n              if (success === true) {\n                this.send(this.channel, [\n                  `:white_check_mark:  Deleted tag **${tag}**`\n                ])\n              }\n            })\n          }\n        }\n      })\n    })\n\n    this.hears(/^>>(.+)$/, matches => {\n      this.getEntry(this.server, tags => {\n        if (tags !== null) {\n          if (typeof tags[matches[1]] !== 'undefined') {\n            this.send(this.channel, tags[matches[1]])\n          }\n        }\n      })\n    })\n  }\n}\n\nmodule.exports = Tags\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}