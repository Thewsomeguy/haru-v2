{"version":3,"sources":["modules/Games/slots.js"],"names":[],"mappings":"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","file":"modules/Games/slots.js","sourcesContent":["import _ from 'lodash'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport { Banker, Claims } from '../.Cache/Bank'\nimport RL from '../.Cache/RateLimiter'\n\nclass Slots extends BaseCommand {\n  static get name () {\n    return 'slots'\n  }\n\n  static get description () {\n    return 'Slot machine game'\n  }\n\n  static get usage () {\n    return [\n      '```rb',\n      '== SLOTS ==',\n      '```',\n      ['slots [amount] - Spins with the amount of wager, min 1 max 100']\n    ]\n  }\n\n  get symbols () {\n    return [\n      'üçí', 'üçí', 'üçí',\n      '7‚É£',\n      'üçê', 'üçê', 'üçê', 'üçê',\n      'üá±üáª', 'üá±üáª',\n      'üçà', 'üçà', 'üçà', 'üçà',\n      'üçá', 'üçá', 'üçá', 'üçá',\n      'üçä', 'üçä', 'üçä', 'üçä',\n      'üíé',\n      'üçâ', 'üçâ', 'üçâ', 'üçâ',\n      'üîî'\n    ]\n  }\n\n  get wins () {\n    return {\n      'üçí1': 2,\n      'üçí2': 5,\n      'üçí3': 10,\n      '7‚É£2': 50,\n      '7‚É£3': 150,\n      'üçê3': 20,\n      'üçà3': 20,\n      'üçá3': 20,\n      'üçä3': 20,\n      'üíé2': 25,\n      'üíé3': 200,\n      'üîî3': 50,\n      'üçâ3': 20,\n      'üá±üáª2': 40,\n      'üá±üáª3': 100\n    }\n  }\n\n  spin (bet) {\n    let symbols = this.symbols\n    if (RL.isLimited(this.sender)) {\n      this.client.deleteMessage(this.message)\n      return this.reply(\n        `Calm down, you\\'re spamming \\`${this.prefix}slots\\` too quickly!`, {\n          deleteDelay: 3000\n        })\n    }\n    RL.inc(this.sender)\n    if (bet <= 0) bet = 1\n    if (bet > 100) bet = 100\n    Banker.getUser(this.sender, (err, credits) => {\n      if (err) {\n        this.logger.error(`${this.sender.name} met an error fetching credits`, err)\n        this.reply('Error fetching credits amount:\\n' + err)\n        return\n      }\n      credits = parseInt(credits, 10)\n      if (credits === 0) {\n        this.reply(\n          `You have no remaining funds.`)\n        return\n      } else if (credits < bet) {\n        this.reply(\n          `You have insufficient funds of only **${credits}** credit(s).\\n` +\n          `Out of credits? You can use \\`${this.prefix}credits claim\\` to ` +\n          'get credits every 24 hours'\n        )\n        return\n      }\n      Banker.delCredits(this.sender, bet, (err, res) => {\n        if (err) {\n          this.logger.error(`${this.sender.name} met an error removing credits`, err)\n          this.reply('Error removing credits amount:\\n' + err)\n          return\n        }\n        let machine = []\n        for (let i = 0; i < 3; i++) {\n          let sample = []\n          while (sample.length < 3) {\n            sample = _.uniq(_.sampleSize(symbols, 3))\n          }\n          machine.push(sample)\n        }\n        let payline = [machine[0][1], machine[1][1], machine[2][1]]\n        this.send(this.channel, [\n          '**__   S   L   O   T   S   __**',\n          `|| ${machine[0][0]} ${machine[1][0]} ${machine[2][0]} ||`,\n          `> ${payline.join(' ')} <`,\n          `|| ${machine[0][2]} ${machine[1][2]} ${machine[2][2]} ||`,\n          `\\n**${this.sender.name}** used **${bet}** credit(s) and...`\n        ].join('\\n'))\n        .then(msg => {\n          this.checkWins(payline, bet)\n          .then(amount => {\n            let message = ` won **${amount}** credits! Congratulations!`\n            this.client.updateMessage(msg, msg.content.substring(0, msg.content.length - 3) + message)\n            Banker.addCredits(this.sender, amount, (err, res) => {\n              if (err) {\n                this.logger.error(`${this.sender.name} met an error adding credits`, err)\n                this.reply('Error adding credits amount:\\n' + err)\n                return\n              }\n            })\n          })\n          .catch(() => {\n            this.client.updateMessage(msg, msg.content.substring(0, msg.content.length - 3) +\n            ' didn\\'t win anything. Better luck next time!')\n          })\n        })\n      })\n    })\n  }\n\n  checkWins (payline, bet) {\n    let payout = this.wins\n    return new Promise(function (res, rej) {\n      let report = _.countBy(payline)\n      let reward = 0\n      Object.keys(report).forEach((elem, idx) => {\n        let win = payout[`${elem}${report[elem]}`]\n        reward += win ? win * bet : 0\n      })\n      if (reward > 0) return res(reward)\n      return rej()\n    })\n  }\n\n  handle () {\n    this.responds(/^slots$/i, () => {\n      this.spin(1)\n    })\n\n    this.responds(/^slots (\\d+)$/i, matches => {\n      let bet = matches[1]\n      this.spin(bet)\n    })\n  }\n}\n\nmodule.exports = Slots\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}