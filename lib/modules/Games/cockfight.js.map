{"version":3,"sources":["modules/Games/cockfight.js"],"names":[],"mappings":"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","file":"modules/Games/cockfight.js","sourcesContent":["import _ from 'lodash'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport { Banker } from '../.Cache/Bank'\nimport { Cock, Den, Arena } from '../.Cache/Cockfight'\n\nclass Cockfight extends BaseCommand {\n  static get name () {\n    return 'cockfight'\n  }\n\n  static get description () {\n    return 'Game of Cockfights'\n  }\n\n  listen () {\n    Den.once('REQUEST_SENT:' + this.channel.id, arena => {\n      let player1 = this.client.users.get('id', arena.player1)\n      let player2 = this.client.users.get('id', arena.player2)\n      this.send(this.channel, [\n        `${player1.mention()} challenged ${player2.mention()} to a cockfight!`,\n        `The other party has **60 seconds** to respond with \\`${this.prefix}cockfight ready\\` ` +\n        'or they automatically forfeit!'\n      ].join('\\n'))\n    })\n\n    Den.once('REQUEST_IGNORED:' + this.channel.id, arena => {\n      this.send(this.channel,\n      `${this.client.users.get('id', arena.waiting).mention()} has forfeited the battle!\\n` +\n      'Guess they **chickened out**, huh...')\n      Den.removeAllListeners('REQUEST_SENT:' + this.channel.id)\n      Den.removeAllListeners('BETTING_START:' + this.channel.id)\n      Den.removeAllListeners('BETTING_END:' + this.channel.id)\n      Den.removeAllListeners('ARENA_START:' + this.channel.id)\n      Den.removeAllListeners('ARENA_END:' + this.channel.id)\n      Den.removeAllListeners('BETTING_WON:' + this.channel.id)\n      Den.removeAllListeners('BETTING_LOST:' + this.channel.id)\n    })\n\n    Den.once('BETTING_START:' + this.channel.id, arena => {\n      this.send(this.channel,\n      'The battle will commence in 1 minute!\\n' +\n      `Place your bets by doing \\`${this.prefix}cockfight bet <user> <amount>\\`!`)\n    })\n\n    Den.once('BETTING_END:' + this.channel.id, arena => {\n      this.send(this.channel, 'The betting phase is over! And so, the battle begins!')\n    })\n\n    Den.once('ARENA_START:' + this.channel.id, arena => {\n      this.battle(arena)\n    })\n\n    Den.once('ARENA_END:' + this.channel.id, (arena, winner, loser) => {\n      this.send(this.channel, [\n        `${this.client.users.get('id', winner.id).mention()} ` +\n        `wins the match with their :rooster: **${winner.name}**!`,\n        'They win **1500** credits, sponsored by the loser ' +\n        `${this.client.users.get('id', loser.id).mention()}!`\n      ].join('\\n'))\n      .then(() => {\n        Banker.addCredits(winner.id, 1500)\n        Banker.delCredits(loser.id, 1500)\n      })\n    })\n\n    Den.once('BETTING_WON', (winner, bets) => {\n      bets.forEach(bet => {\n        Banker.addCredits(bet.user, bet.amount)\n        this.send(this.channel,\n          `:moneybag:  **${this.client.users.get('id', bet.user).name}** has won **${bet.amount}** credits!`)\n      })\n    })\n\n    Den.once('BETTING_LOST', (loser, bets) => {\n      bets.forEach(bet => {\n        Banker.delCredits(bet.user, bet.amount)\n        this.send(this.channel,\n          `:money_with_wings:  **${this.client.users.get('id', bet.user).name}** has lost **${bet.amount}** credits!`)\n      })\n    })\n  }\n\n  static get usage () {\n    return [\n      '```rb',\n      '== COCKFIGHTS ==',\n      '```',\n      [\n        'cockfight <user> - Engages in a cockfight with a user!',\n        'cockfight buy - Buys a :rooster: !',\n        'cockfight bet <user> <amount> - Bets on a user during a battle!',\n        'cockfight rename - Allows you to rename a :rooster: !'\n      ]\n    ]\n  }\n\n  battle (arena) {\n    Den.get(arena.player1).then(player1 => {\n      Den.get(arena.player2).then(player2 => {\n        let channel = arena.id\n        player1.hp = 10\n        player2.hp = 10\n        let name = (player) => {\n          return `[:rooster: **${player.name}**]`\n        }\n        const t1_hit = [\n          '%player1% opens the match with a solid hit to %player2%, dealing %dmg% damage!',\n          '%player1% lands the first strike on %player2%, who suffers %dmg% damage!',\n          '%player2% suffers the first pounding by %player1%, who hits for %dmg% damage!',\n          '%player1% secures a good first hit on %player2%, delivering %dmg% damage!',\n          '%player1% administers a quick %dmg% damage on %player2% to begin the match!'\n        ]\n        const t1_crit = [\n          '%player1% manages to land a critical strike on its first hit, dealing %dmg% damage to %player2!',\n          '%player1% dispenses a critical first strike, dealing %dmg% damage to %player2%!',\n          'The match begins with %player1% delivering a critical %dmg% points of damage to %player2%!'\n        ]\n        const t1_miss = [\n          '%player1% attempts for a first hit, but misses %player2% completely!',\n          'The match begins with %player1% attempting a good score on %player2% but the latter quickly dodges!',\n          '%player2% dodges %player1%\\'s strike, bringing the match to an intense start!'\n        ]\n        const hit = [\n          '%player1% administers a strong hit to %player2%, dealing %dmg% damage!',\n          '%player1% lands a strike on %player2%, who suffers %dmg% damage!',\n          '%player2% suffers a pounding by %player1%, who hits for %dmg% damage!',\n          '%player1% secures a good hit on %player2%, delivering %dmg% damage!',\n          '%player1% delivers a quick %dmg% damage to %player2%!'\n        ]\n        const crit = [\n          '%player1% delivers a swift blow to %player2% for an extra damage of %dmg%!',\n          '%player1% lands a critical hit to %player2% for %dmg% damage!',\n          'Ouch! %player2% suffers a heavy blow by %player1% who hits for %dmg% damage!',\n          '%player1%\\'s sudden strike delivers a critical hit on %player2% who suffers %dmg% damage!',\n          '%player2% suffers a critical hit by %player1% of %dmg% damage!'\n        ]\n        const miss = [\n          '%player1% delivers a quick strike towards %player2%, but alas! They miss by a small margin!',\n          '%player1%\\'s swift movements are no match for %player2%, who easily dodges!',\n          '%player2% dodges %player1%\\'s hit after hit! What a match!',\n          '%player1% charges towards %player2%, who manages to dodge in the nick of time!'\n        ]\n        let turns = [player1, player2]\n        if (Math.random() <= 0.5) {\n          _.reverse(turns)\n        }\n        let turn = (hit, crit, miss) => {\n          return new Promise((res, rej) => {\n            switch (_.sample(['hit', 'hit', 'hit', 'crit', 'miss', 'miss'])) {\n              case 'hit':\n                this.send(channel, _.sample(hit)\n                  .replace('%player1%', name(turns[0]))\n                  .replace('%player2%', name(turns[1]))\n                  .replace('%dmg%', `**${turns[0].dmg}**`)\n                ).then(res)\n                turns[1].hp -= turns[0].dmg\n                break\n              case 'crit':\n                this.send(channel, _.sample(crit)\n                  .replace('%player1%', name(turns[0]))\n                  .replace('%player2%', name(turns[1]))\n                  .replace('%dmg%', `**${turns[0].dmg * 2}**`)\n                ).then(res)\n                turns[1].hp -= turns[0].dmg * 2\n                break\n              case 'miss':\n                this.send(channel, _.sample(miss)\n                  .replace('%player1%', name(turns[0]))\n                  .replace('%player2%', name(turns[1]))\n                ).then(res)\n                break\n            }\n          })\n        }\n        let check = () => {\n          if (turns[0].hp > 0 && turns[1].hp > 0) {\n            _.reverse(turns)\n            setTimeout(() => {\n              turn(hit, crit, miss).then(check)\n            }, 2000)\n          } else {\n            let win = (winner, loser) => {\n              winner.wins++\n              winner.hp = 10\n              loser.losses++\n              loser.hp = 10\n              Den.set(winner.id, winner)\n              Den.set(loser.id, loser)\n              Den.end(channel, winner, loser)\n            }\n            if (turns[1].hp <= 0) {\n              win(turns[0], turns[1])\n            } else if (turns[0].hp <= 0) {\n              win(turns[1], turns[0])\n            }\n          }\n        }\n        turn(t1_hit, t1_crit, t1_miss).then(check)\n      })\n    })\n  }\n\n  handle () {\n    this.responds(/^cockfight$/i, matches => {\n      Den.get(this.sender.id).then(cock => {\n        if (!cock) {\n          this.send(this.channel,\n            `:information_source:  **${this.sender.name}**, you don\\'t own a :rooster: yet!\\n` +\n            `:arrows_counterclockwise:  To purchase one, type \\`${this.prefix}cockfight buy\\`.`)\n          return\n        }\n        this.send(this.channel, [\n          `:information_source:  **Cockfight Statistics** for **${this.sender.name}**`,\n          `\\`Name\\`: **${cock.name}** :rooster:`,\n          `\\`Wins\\`: ${cock.wins}`,\n          `\\`Losses\\`: ${cock.losses}`\n        ].join('\\n'))\n      })\n    })\n\n    this.responds(/^cockfight <@!*(\\d+)>$/i, matches => {\n      if (this.isPrivate) return false\n      let enemID = matches[1]\n      let user = this.client.users.get('id', matches[1])\n      if (matches[1] === this.sender.id) {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, you can\\'t challenge yourself!!`)\n      }\n      if (!user) {\n        this.send(this.channel, `:information_source:  **${this.sender.name}**, that user doesn\\'t exist in my records!`)\n        return\n      } else if (user.bot === true) {\n        this.send(this.channel, `:information_source:  **${this.sender.name}**, you can\\'t challenge bots!`)\n        return\n      } else if (user.status !== 'online') {\n        this.send(this.channel, `:information_source:  **${this.sender.name}**, wait until that user is online to challenge them!`)\n        return\n      } else if (!this.server.members.get('id', matches[1])) {\n        this.send(this.channel, `:information_source:  **${this.sender.name}**, that user is not in this server.`)\n        return\n      } else if (Den.hasArena(this.channel.id)) {\n        this.send(this.channel, `:information_source:  **${this.sender.name}**, there\\'s a battle ongoing in this channel.`)\n        return\n      }\n      Den.get(this.sender.id)\n      .then(player => {\n        if (!player) {\n          this.send(this.channel,\n            `:negative_squared_cross_mark:  **${this.sender.name}**, you don\\'t own a :rooster: yet!\\n` +\n            `:yen:  To buy one, do \\`${this.prefix}cockfight buy\\`.`\n          )\n          return\n        } else if (Den.isIngame(player.id)) {\n          this.send(this.channel,\n            `:negative_squared_cross_mark:  **${this.sender.name}**, you\\'re in the middle of a battle!`)\n          return\n        }\n        Den.get(enemID)\n        .then(enemy => {\n          if (!enemy) {\n            this.send(this.channel,\n              `:negative_squared_cross_mark:  **${this.sender.name}**, that user doesn\\'t own a :rooster: yet!`)\n            return\n          } else if (Den.isIngame(enemy.id)) {\n            this.send(this.channel,\n              `:negative_squared_cross_mark:  **${this.sender.name}**, that player is in the middle of a battle!`)\n            return\n          }\n          Banker.get(this.sender.id, (err, cred) => {\n            if (err) {\n              this.logger.error('Error reading/writing to Redis', err)\n              this.reply('Error reading/writing to Redis:\\n' + err)\n              return\n            }\n            if (cred < 1500) {\n              this.send(this.channel,\n                `:negative_squared_cross_mark:  **${this.sender.name}**, you do not have enough credits!\\n` +\n                `:yen:  You need **${1500 - cred}** more credits.`)\n              return\n            }\n            Banker.get(matches[1], (err, cred) => {\n              if (err) {\n                this.logger.error('Error reading/writing to Redis', err)\n                this.reply('Error reading/writing to Redis:\\n' + err)\n                return\n              }\n              if (cred < 1500) {\n                this.send(this.channel,\n                  `:negative_squared_cross_mark:  **${this.sender.name}**, that user does not have enough credits to fight you!`)\n                return\n              }\n              this.listen()\n              let arena = new Arena({\n                id: this.channel.id,\n                player1: player.id,\n                player2: enemy.id,\n                waiting: enemy.id\n              })\n              Den.register(this.channel.id, arena)\n            })\n          })\n        })\n      })\n    })\n\n    this.responds(/^cockfight rename$/i, matches => {\n      Den.get(this.sender.id).then(cock => {\n        if (!cock) {\n          this.send(this.channel,\n            `:information_source:  **${this.sender.name}**, you don\\'t own a :rooster: yet!\\n` +\n            `:arrows_counterclockwise:  To purchase one, type \\`${this.prefix}cockfight buy\\`.`)\n          return\n        }\n        this.await(this.message,\n          `:information_source:  **${this.sender.name}**, what would you like to rename your :rooster: to?`,\n          msg => { return /^(.+)$/.test(msg.content) }).then(msg => {\n            this.send(this.channel, `Nice name! ${this.sender.name}'s :rooster: is now called **${msg.content}**!`)\n            cock.name = msg.content\n            Den.set(this.sender.id, cock)\n          })\n      })\n    })\n\n    this.responds(/^cockfight buy$/i, matches => {\n      Den.get(this.sender.id).then(cock => {\n        if (cock) {\n          this.send(this.channel,\n            `:information_source:  **${this.sender.name}**, you already own a :rooster: named **${cock.name}**!`)\n          return\n        }\n        Banker.getUser(this.sender, (err, credits) => {\n          if (err) {\n            this.logger.error('Error reading/writing to Redis', err)\n            this.reply('Error reading/writing to Redis:\\n' + err)\n            return\n          }\n          credits = parseInt(credits, 10)\n          if (credits < 5000) {\n            this.send(this.channel,\n              `:information_source:  **${this.sender.name}**, you need **5000** credits to buy a :rooster: .\\n` +\n              `You only have **${credits}**.`)\n            return\n          }\n          Banker.delCredits(this.sender, 5000)\n          this.await(this.message, [\n            `**${this.sender.name}** bought a new :rooster: for **5000** credits!`,\n            'Time to give it a new name. What will you name it?'\n          ].join('\\n'), msg => {\n            return /^(.+)$/.test(msg.content)\n          }).then(msg => {\n            this.send(this.channel, `Nice name! **${this.sender.name}**'s new :rooster: is now called **${msg.content}**!`)\n            let cock = new Cock({ id: this.sender.id, name: msg.content })\n            Den.set(this.sender.id, cock).catch(err => {\n              if (err) {\n                this.logger.error('Unable to create cockfight entry', err)\n                this.reply([\n                  `Unable to create Cockfights entry: ${err}`,\n                  'Your credits will be refunded.'\n                ].join('\\n'))\n                Banker.addCredits(this.sender, 5000)\n                return\n              }\n            })\n          })\n        })\n      })\n    })\n\n    this.responds(/^cockfight ready$/i, matches => {\n      if (this.isPrivate) return false\n      let arena = Den.getArena(this.channel.id)\n      if (!arena) {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, no one has challenged you to a cockfight yet!\\n` +\n          `To challenge someone, do \\`${this.prefix}cockfight fight <user>\\``)\n        return\n      }\n      if (arena.waiting !== this.sender.id) {\n        this.send(this.channel,\n          `:information_source:  We aren\\'t waiting for your response, **${this.sender.name}**!`)\n        return\n      }\n      Den.accepted(this.channel.id)\n      this.send(this.channel, `:white_check_mark: **${this.sender.name}** has declared himself ready!`)\n    })\n\n    this.responds(/^cockfight bet <@!*(\\d+)> (\\d+)$/i, matches => {\n      if (this.isPrivate) return false\n      let amount = parseInt(matches[2], 10)\n      let arena = Den.getArena(this.channel.id)\n      if (this.sender.id === arena.player1 || this.sender.id === arena.player2) {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, you\\'re a participant of this battle!`)\n        return\n      }\n      if (!arena) {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, there\\'s no battle going on in this server!`)\n        return\n      }\n      if (arena.state !== 'betting') {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, it isn\\'t the betting phase for this battle!`)\n        return\n      }\n      if (matches[1] !== arena.player1 && matches[1] !== arena.player2) {\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}**, that user isn\\'t a participant of this battle!`)\n        return\n      }\n      Banker.getUser(this.sender, (err, credits) => {\n        if (err) {\n          this.logger.error(`${this.sender.name} met an error fetching credits`, err)\n          this.reply('Error fetching credits:\\n' + err)\n          return\n        }\n        if (amount > 5000) {\n          amount = 5000\n          this.send(this.channel, ':arrows_counterclockwise:  **${this.sender.name}**,  maximum bet is **5000** credits. Betting that amount.')\n        }\n        if (credits < amount) {\n          this.send(this.channel,\n            `:negative_squared_cross_mark:  **${this.sender.name}**, you do not have enough credits to bet **${amount}** credits!\\n` +\n            `:information_source:  You'll need **${amount - credits}** more credits.`)\n          return\n        }\n        Den.placeBet(this.channel.id, matches[1], {\n          user: this.sender.id,\n          amount: amount\n        })\n        this.send(this.channel,\n          `:information_source:  **${this.sender.name}** placed a bet of **${amount}** credits on **${this.client.users.get('id', matches[1]).name}**!`)\n      })\n    })\n  }\n}\n\nmodule.exports = Cockfight\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}