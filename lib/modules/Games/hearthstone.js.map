{"version":3,"sources":["modules/Games/hearthstone.js"],"names":[],"mappings":"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","file":"modules/Games/hearthstone.js","sourcesContent":["import path from 'path'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport base64 from 'node-base64-image'\nimport gm from 'gm'\nimport Canvas, {Image as Image} from 'canvas'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport HSCache from '../.Cache/Hearthstone'\n\nlet canvas = new Canvas(2700, 1615)\nlet ctx = canvas.getContext('2d')\n\nlet src = fs.readFileSync(path.join(process.cwd(), 'db/images/packs.png'))\nlet base = new Image()\nbase.src = src\nctx.drawImage(base, 0, 0, base.width, base.height)\n\nclass Hearthstone extends BaseCommand {\n  static get name () {\n    return 'hs'\n  }\n\n  static get aliases () {\n    return [\n      'hearthstone'\n    ]\n  }\n\n  static get description () {\n    return 'Opens a new Hearthstone pack'\n  }\n\n  static get usage () {\n    return [\n      '- Opens a new Classic Hearthstone pack',\n      'gvg - Opens a new GoG HS pack',\n      'wotog - Opens a new WotOG pack'\n    ]\n  }\n\n  openCards (cards) {\n    let pack = []\n    while (pack.length < 5) {\n      let num = Math.floor(Math.random() * 10000) + 1\n      if (pack.length === 4 &&\n        _.filter(cards, ['rarity', 'Common']).length === 4) {\n        num = Math.floor(Math.random() * 10000 - 7166) + 7166\n      }\n      let rarity = null\n      let golden = false\n      if (num <= 7037) {\n        rarity = 'Common'\n      } else if (num > 7038 && num <= 9196) {\n        rarity = 'Rare'\n      } else if (num > 9197 && num <= 9604) {\n        rarity = 'Epic'\n      } else if (num > 9605 && num <= 9752) {\n        rarity = 'Legendary'\n      } else if (num > 9753 && num < 9879) {\n        rarity = 'Common'\n        golden = true\n      } else if (num > 9880 && num < 9973) {\n        rarity = 'Rare'\n        golden = true\n      } else if (num > 9974 && num < 9992) {\n        rarity = 'Epic'\n        golden = true\n      } else if (num > 9993 && num < 10000) {\n        rarity = 'Legendary'\n        golden = true\n      }\n      let list = _.filter(cards, ['rarity', rarity])\n      let sample = () => {\n        let card = _.sample(list)\n        if (card.rarity === rarity) {\n          pack.push({\n            card: card,\n            golden: golden\n          })\n        } else {\n          sample()\n        }\n      }\n      sample()\n    }\n    this.drawImage(pack)\n  }\n\n  drawImage (cards) {\n    let pack = []\n    let fetch = (elem, q, local) => {\n      base64.base64encoder(q, {\n        string: true,\n        localFile: local\n      }, (err, image) => {\n        if (err) {\n          return this.logger.error(\n            `Image fetch from ${elem.img} failed`, err\n          )\n        }\n        let c = new Image()\n        c.src = new Buffer(image, 'base64')\n        pack.push(c)\n      })\n    }\n    cards.forEach((elem, idx) => {\n      let q = null\n      if (elem.golden) {\n        let file = path.join(process.cwd(), `db/images/golden/${elem.card.cardId}.png`)\n        if (fs.existsSync(file)) {\n          q = file\n          fetch(elem, q, false)\n        } else {\n          gm(elem.card.imgGold + '[0]')\n          .write(file, err => {\n            if (err) {\n              this.logger.error(\n                `Error saving golden card ${elem.card.cardId}`, err\n              )\n              return\n            }\n            q = file\n            fetch(elem, q, true)\n          })\n        }\n      } else {\n        q = elem.card.img\n        fetch(elem, q, false)\n      }\n    })\n    let check = (arr) => {\n      if (arr.length === 5) {\n        this.saveFile(pack)\n      } else {\n        setTimeout(() => {\n          check(pack)\n        }, 500)\n      }\n    }\n    check(pack)\n  }\n\n  saveFile (pack) {\n    let coords = [\n      {\n        x: 1150,\n        y: 870\n      },\n      {\n        x: 1732,\n        y: 870\n      },\n      {\n        x: 943,\n        y: 145\n      },\n      {\n        x: 1433,\n        y: 20\n      },\n      {\n        x: 1973,\n        y: 145\n      }\n    ]\n    pack.forEach((c, idx) => {\n      ctx.drawImage(c, coords[idx].x, coords[idx].y, 480, 750)\n    })\n    let out = fs.createWriteStream(\n      path.join(process.cwd(), `db/images/${this.message.id}.png`)\n    )\n    let stream = canvas.pngStream()\n\n    stream.on('data', chunk => {\n      out.write(chunk)\n    })\n\n    stream.on('end', () => {\n      setTimeout(() => {\n        this.sendPack()\n      }, 500)\n    })\n  }\n\n  sendPack () {\n    this.upload(\n      path.join(process.cwd(), `db/images/${this.message.id}.png`), 'pack.png'\n    ).then(() => {\n      this.client.updateMessage(this.toUpdate, `Pack opened, ${this.sender.mention()}!`)\n      fs.unlink(path.join(process.cwd(), `db/images/${this.message.id}.png`))\n    })\n  }\n\n  handle () {\n    this.responds(/^hs$/i, matches => {\n      this.reply('Opening a **Classic** Hearthstone pack...')\n      .then(msg => {\n        this.toUpdate = msg\n      })\n      this.openCards(HSCache.getCardSet())\n    })\n\n    this.responds(/^hs gvg$/i, matches => {\n      this.reply('Opening a **Goblins vs Gnomes** Hearthstone pack...')\n      .then(msg => {\n        this.toUpdate = msg\n      })\n      this.openCards(HSCache.getCardSet('Goblins vs Gnomes'))\n    })\n\n    this.responds(/^hs wotog$/i, matches => {\n      this.reply('Opening a **Whispers of the Old Gods** Hearthstone pack...')\n      .then(msg => {\n        this.toUpdate = msg\n      })\n      this.openCards(HSCache.getCardSet('Whispers of the Old Gods'))\n    })\n\n    this.responds(/^hs tgt$/i, matches => {\n      this.reply('Opening a **The Grand Tournament** Hearthstone pack...')\n      .then(msg => {\n        this.toUpdate = msg\n      })\n      this.openCards(HSCache.getCardSet('The Grand Tournament'))\n    })\n  }\n}\n\nmodule.exports = Hearthstone\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}