{"version":3,"sources":["modules/Images/rip.js"],"names":[],"mappings":"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","file":"modules/Images/rip.js","sourcesContent":["import path from 'path'\nimport gm from 'gm'\nimport fs from 'fs'\nimport Canvas, {Image as Image} from 'canvas'\nimport base64 from 'node-base64-image'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport ImageCacher from '../.Cache/ImageCacher'\n\nclass RIP extends BaseCommand {\n  static get name () {\n    return 'rip'\n  }\n\n  static get description () {\n    return 'Rest in peace'\n  }\n\n  static get usage () {\n    return [\n      ['**rip** [text] - Here lies a dead soul']\n    ]\n  }\n\n  createImage (input) {\n    input = input.match(/.+/g).join('-\\n')\n    gm(path.join(process.cwd(), 'db/images/rip.png'))\n    .font(path.join(process.cwd(), 'db/fonts/comicsans.ttf'), 21.5)\n    .gravity('Center')\n    .drawText(-10, 70, input)\n    .fontSize(11)\n    .drawText(-7, 94, Math.floor(Math.random() * (2016 - 1900) + 1) + ' - 2016')\n    .write(path.join(process.cwd(), `db/images/${this.message.id}.png`), err => {\n      if (err) {\n        this.logger.error(\n          `Error occurred while writing file from GM command 'rip'`, err\n        )\n        this.reply(`Error: Unable to write image\\n${err}`)\n        return\n      }\n      this.upload(\n        path.join(process.cwd(), `db/images/${this.message.id}.png`), 'rip.png'\n      )\n      .then(() => {\n        fs.unlink(path.join(process.cwd(), `db/images/${this.message.id}.png`))\n      })\n      .catch(err => {\n        this.logger.error(\n          `Error occurred while uploading file from GM command 'rip'`, err\n        )\n        this.reply(`Error: Unable to upload image\\n${err}`)\n        return\n      })\n    })\n  }\n\n  genImage (image) {\n    let canvas = new Canvas(1920, 2160)\n    let ctx = canvas.getContext('2d')\n    let base = new Image()\n    base.src = new Buffer(image, 'base64')\n    ctx.drawImage(base, 440, 0, 1000, 1000)\n    fs.readFile(path.join(process.cwd(), 'db/images/rip2.png'), (err, src) => {\n      if (err) {\n        this.logger.error('Error reading alt rip base image', err)\n        return\n      }\n      let c = new Image()\n      c.src = src\n      ctx.drawImage(c, 0, 0, 1920, 2160)\n      let out = fs.createWriteStream(\n        path.join(process.cwd(), `db/images/${this.message.id}.png`)\n      )\n      let stream = canvas.pngStream()\n\n      stream.on('data', chunk => {\n        out.write(chunk)\n      })\n\n      stream.on('end', () => {\n        setTimeout(() => {\n          this.upload(\n            path.join(process.cwd(), `db/images/${this.message.id}.png`), 'dead.png'\n          ).then(() => {\n            fs.unlink(path.join(process.cwd(), `db/images/${this.message.id}.png`))\n          })\n        }, 500)\n      })\n    })\n  }\n\n  altImage (user) {\n    if (ImageCacher.has(user.id)) {\n      console.log(ImageCacher.get(user.id))\n      this.genImage(ImageCacher.get(user.id))\n    } else {\n      base64.base64encoder(user.avatarURL, { string: true }, (err, image) => {\n        if (err) {\n          this.logger.error(\n            `Image fetch from ${user.avatarURL} failed`, err\n          )\n          return\n        }\n        ImageCacher.add(user.id, image)\n        this.genImage(image)\n      })\n    }\n  }\n\n  handle () {\n    this.responds(/^rip$/i, () => {\n      if (Math.random() < 0.5) {\n        this.createImage(this.sender.name)\n      } else {\n        this.altImage(this.sender)\n      }\n    })\n\n    this.responds(/^rip <@!*(\\d+)>$/i, matches => {\n      let user = this.client.users.get('id', matches[1])\n      if (Math.random() < 0.5) {\n        let name = user ? user.name : `<@${matches[1]}>`\n        this.createImage(name)\n      } else {\n        if (user) {\n          this.altImage(this.sender)\n        }\n      }\n    })\n\n    this.responds(/^rip (\"|')(.+)\\1$/i, matches => {\n      this.createImage(matches[2])\n    })\n  }\n}\n\nmodule.exports = RIP\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}