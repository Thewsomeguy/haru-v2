{"version":3,"sources":["modules/Miscellaneous/xkcd.js"],"names":[],"mappings":";;;;AAAA;;;;AAEA;;;;;;;;;;;;IAEM,I;;;;;;;;;;;+BAeQ,E,EAAI;AAAA;;AACd,2BACC,GADD,sBACwB,EADxB,mBAEC,GAFD,CAEK,UAAC,GAAD,EAAM,GAAN,EAAc;AACjB,YAAI,GAAJ,EAAS;AACP,iBAAK,MAAL,CAAY,KAAZ,gCAAiD,GAAjD;AACA,iBAAO,OAAK,KAAL,+CAAP;AACD;AACD,eAAO,OAAK,IAAL,CAAU,OAAK,OAAf,EAAwB,QACxB,IAAI,IAAJ,CAAS,KADe,eAEzB,IAAI,IAAJ,CAAS,GAFgB,QAG7B,IAAI,IAAJ,CAAS,GAHoB,EAI7B,IAJ6B,CAIxB,IAJwB,CAAxB,CAAP;AAKD,OAZD;AAaD;;;6BAES;AAAA;;AACR,WAAK,QAAL,CAAc,SAAd,EAAyB,YAAM;AAC7B,YAAI,MAAM,IAAV;AACA,6BACC,GADD,CACK,6BADL,EAEC,GAFD,CAEK,UAAC,GAAD,EAAM,GAAN,EAAc;AACjB,cAAI,CAAC,GAAL,EAAU;AACR,kBAAM,IAAI,IAAJ,CAAS,GAAf;AACD;AACD,iBAAO,OAAK,UAAL,CAAgB,KAAK,KAAL,CAAY,KAAK,MAAL,KAAgB,GAAjB,GAAwB,CAAnC,CAAhB,CAAP;AACD,SAPD;AAQD,OAVD;;AAYA,WAAK,QAAL,CAAc,eAAd,EAA+B,mBAAW;AACxC,eAAO,OAAK,UAAL,CAAgB,QAAQ,CAAR,CAAhB,CAAP;AACD,OAFD;AAGD;;;wBA9CkB;AACjB,aAAO,MAAP;AACD;;;wBAEyB;AACxB,aAAO,qBAAP;AACD;;;wBAEmB;AAClB,aAAO,CACL,CAAC,0EAAD,CADK,CAAP;AAGD;;;;;;AAqCH,OAAO,OAAP,GAAiB,IAAjB","file":"modules/Miscellaneous/xkcd.js","sourcesContent":["import request from 'superagent'\n\nimport BaseCommand from '../../base/BaseCommand'\n\nclass XKCD extends BaseCommand {\n  static get name () {\n    return 'xkcd'\n  }\n\n  static get description () {\n    return 'Fetches XKCD comics'\n  }\n\n  static get usage () {\n    return [\n      ['**xkcd** [comic ID] - Returns the comic with the specified ID (optional)']\n    ]\n  }\n\n  fetchComic (id) {\n    request\n    .get(`http://xkcd.com/${id}/info.0.json`)\n    .end((err, res) => {\n      if (err) {\n        this.logger.error(`Error fetching XKCD comic: `, err)\n        return this.reply(`**Error**: XKCD query returned no pictures.`)\n      }\n      return this.send(this.channel, [\n        `**${res.body.title}**`,\n        `*${res.body.alt}*`,\n        res.body.img\n      ].join('\\n'))\n    })\n  }\n\n  handle () {\n    this.responds(/^xkcd$/i, () => {\n      let max = 1600\n      request\n      .get('http://xkcd.com/info.0.json')\n      .end((err, res) => {\n        if (!err) {\n          max = res.body.num\n        }\n        return this.fetchComic(Math.floor((Math.random() * max) + 1))\n      })\n    })\n\n    this.responds(/^xkcd (\\d+)$/i, matches => {\n      return this.fetchComic(matches[1])\n    })\n  }\n}\n\nmodule.exports = XKCD\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}