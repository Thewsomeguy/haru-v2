{"version":3,"sources":["modules/Anime/gelbooru.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;;;;;;;;;IAEM,Q;;;;;;;;;;;+BAeQ,K,EAAO;AACjB,WAAK,IAAL,CAAU,KAAK,OAAf,EACE,uBAAqB,MAAM,KAAN,CAAY,GAAZ,EAAiB,IAAjB,CAAsB,IAAtB,CAArB,iCADF;AAID;;;+BAEW,K,EAAO;AAAA;;;AAEjB,kCAAI,UAAJ,EAAgB,KAAhB,EAAuB,IAAvB,eACC,IADD,CACM,eAAO;AACX,eAAK,YAAL,CAAkB,GAAlB,EAAuB,KAAvB;AACD,OAHD;AAID;;;iCAEa,G,EAAK,K,EAAO;AACxB,UAAI,IAAI,EAAR;AACA,UAAI;AACF,YAAI,KAAK,KAAL,CAAW,IAAI,IAAf,EAAqB,CAArB,CAAJ;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,aAAK,UAAL,CAAgB,KAAhB;AACA;AACD;AACD,UAAI,KAAK,EAAE,QAAX,EAAqB;AACnB,aAAK,IAAL,CAAU,KAAK,OAAf,EAAwB,iBACR,EAAE,KADM,EAEtB,EAAE,QAFoB,EAGtB,IAHsB,CAGjB,IAHiB,CAAxB;AAIA;AACD;AACD,WAAK,UAAL,CAAgB,KAAhB;AACD;;;6BAES,K,EAAO,G,EAAK;AAAA;;AACpB,YAAM,OAAO,KAAb;AACA,kCAAI,UAAJ,EAAgB,KAAhB,EAAuB,IAAvB,WAAoC,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,GAA3B,CAApC,EACC,IADD,CACM,eAAO;AACX,eAAK,YAAL,CAAkB,GAAlB,EAAuB,KAAvB;AACD,OAHD;AAID;;;6BAES;AAAA;;AACR,WAAK,QAAL,CAAc,aAAd,EAA6B,YAAM;AACjC,eAAK,QAAL;AACD,OAFD;;AAIA,WAAK,QAAL,CAAc,kBAAd,EAAkC,mBAAW;AAC3C,YAAI,QAAQ,QAAQ,CAAR,EAAW,KAAX,CAAiB,GAAjB,EAAsB,IAAtB,CAA2B,GAA3B,CAAZ;AACA,eAAK,QAAL,CAAc,KAAd;AACD,OAHD;AAID;;;wBAhEkB;AACjB,aAAO,UAAP;AACD;;;wBAEyB;AACxB,aAAO,mCAAP;AACD;;;wBAEmB;AAClB,aAAO,CACL,CAAC,4CAAD,CADK,CAAP;AAGD;;;;;;AAuDH,OAAO,OAAP,GAAiB,QAAjB","file":"modules/Anime/gelbooru.js","sourcesContent":["import BaseCommand from '../../base/BaseCommand'\nimport img from '../.Cache/ImageFetcher'\n\nclass Gelbooru extends BaseCommand {\n  static get name () {\n    return 'gelbooru'\n  }\n\n  static get description () {\n    return 'Searches the Gelbooru image board'\n  }\n\n  static get usage () {\n    return [\n      ['**gelbooru** [tags...] - Searches danbooru']\n    ]\n  }\n\n  noPictures (query) {\n    this.send(this.channel,\n      `**Error**: Query \"${query.split('+').join(', ')}\"` +\n      ` returned no pictures.`\n    )\n  }\n\n  reducePage (query) {\n    // Temporary workaround for tags with far less than 10000 images\n    img('gelbooru', query, this, `limit=100`)\n    .then(res => {\n      this.fetchResults(res, query)\n    })\n  }\n\n  fetchResults (res, query) {\n    let r = []\n    try {\n      r = JSON.parse(res.text)[0]\n    } catch (err) {\n      this.noPictures(query)\n      return\n    }\n    if (r && r.file_url) {\n      this.send(this.channel, [\n        `**Score**: ${r.score}`,\n        r.file_url\n      ].join('\\n'))\n      return\n    }\n    this.reducePage(query)\n  }\n\n  getImage (query, pid) {\n    pid = pid || 10000\n    img('gelbooru', query, this, `pid=${Math.floor(Math.random() * pid)}`)\n    .then(res => {\n      this.fetchResults(res, query)\n    })\n  }\n\n  handle () {\n    this.responds(/^gelbooru$/i, () => {\n      this.getImage()\n    })\n\n    this.responds(/^gelbooru (.+)$/i, matches => {\n      let query = matches[1].split(' ').join('+')\n      this.getImage(query)\n    })\n  }\n}\n\nmodule.exports = Gelbooru\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}