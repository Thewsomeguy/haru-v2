{"version":3,"sources":["modules/Anime/anime.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,SAAS,2BAAQ,eAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,iBAAzB,CAAR,EAAqD,MAArD,EAAb;;IAEM,K;;;;;;;;;;;6BAeM,K,EAAO;AACf,WAAK,IAAL,CAAU,KAAK,OAAf,EAAwB,uBACF,MAAM,KADJ,SAEtB,MAAM,OAAN,6BAAwC,MAAM,OAA9C,GAA0D,IAFpC,kBAGR,MAAM,KAHE,qBAIL,MAAM,QAJD,mBAKP,MAAM,MALC,kBAMT,MAAM,IAAN,IAAc,MANL,wBAOH,MAAM,UAPH,qBAQL,MAAM,QARD,sBAUpB,MAAM,QAAN,CAAe,CAAf,IACE,aAAG,MAAH,CAAU,MAAM,QAAN,CAAe,CAAf,CAAV,EACD,OADC,CACO,gBADP,EACyB,EADzB,EAED,OAFC,CAEO,YAFP,EAEqB,GAFrB,EAGD,OAHC,CAGO,YAHP,EAGqB,IAHrB,CADF,GAKE,MAfkB,qCAiBU,MAAM,EAjBhB,EAkBtB,IAlBsB,CAkBjB,IAlBiB,CAAxB;AAmBD;;;6BAES;AAAA;;AACR,WAAK,QAAL,CAAc,eAAd,EAA+B,mBAAW;AACxC,YAAI,QAAQ,QAAQ,CAAR,EAAW,KAAX,CAAiB,GAAjB,EAAsB,IAAtB,CAA2B,GAA3B,CAAZ;AACA,6BACC,GADD,oDACsD,KADtD,EAEC,IAFD,CAEM,OAAO,IAFb,EAEmB,OAAO,IAF1B,EAGC,MAHD,CAGQ,KAHR,EAIC,MAJD,CAIQ,IAJR,EAKC,KALD,mCAMC,GAND,CAMK,UAAC,GAAD,EAAM,GAAN,EAAc;AACjB,cAAI,GAAJ,EAAS;AACP,mBAAK,MAAL,CAAY,KAAZ,6BAA8C,GAA9C;AACA,mBAAK,KAAL,iCAAyC,GAAzC;AACA;AACD;AACD,cAAI,IAAI,IAAJ,KAAa,IAAjB,EAAuB;AACrB,mBAAK,KAAL,6BAAqC,QAAQ,CAAR,CAArC;AACA;AACD;AACD,cAAI,UAAU,IAAI,IAAJ,CAAS,KAAT,CAAe,KAA7B;AACA,cAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,mBAAK,QAAL,CAAc,QAAQ,CAAR,CAAd;AACA;AACD;AACD,cAAI,QAAQ,CAAC,6DAAD,CAAZ;AACA,kBAAQ,OAAR,CAAgB,UAAC,IAAD,EAAO,GAAP,EAAe;AAC7B,kBAAM,IAAN,CAAc,MAAM,CAApB,UAA0B,KAAK,KAA/B;AACD,WAFD;AAGA,iBAAK,MAAL,CAAY,aAAZ,CAA0B,OAAK,OAA/B,EAAwC,MAAM,IAAN,CAAW,IAAX,CAAxC,EACC,IADD,CACM,eAAO;AACX,gBAAI,MAAM,SAAS,IAAI,OAAb,EAAsB,EAAtB,IAA4B,CAAtC;AACA,gBAAI,OAAO,QAAQ,MAAnB,EAA2B;AACzB,oBAAM,QAAQ,MAAR,GAAiB,CAAvB;AACD;AACD,mBAAK,QAAL,CAAc,QAAQ,GAAR,CAAd;AACD,WAPD;AAQD,SAjCD;AAkCD,OApCD;AAqCD;;;wBA1EkB;AACjB,aAAO,OAAP;AACD;;;wBAEyB;AACxB,aAAO,uBAAP;AACD;;;wBAEmB;AAClB,aAAO,CACL,CAAC,iDAAD,CADK,CAAP;AAGD;;;;;;AAiEH,OAAO,OAAP,GAAiB,KAAjB","file":"modules/Anime/anime.js","sourcesContent":["import path from 'path'\nimport request from 'superagent'\nimport xml2jsParser from 'superagent-xml2jsparser'\nimport he from 'he'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport FDB from '../../util/FlatDatabase'\n\nlet config = new FDB(path.join(process.cwd(), 'config/mal.json')).getAll()\n\nclass Anime extends BaseCommand {\n  static get name () {\n    return 'anime'\n  }\n\n  static get description () {\n    return 'The command for weebs'\n  }\n\n  static get usage () {\n    return [\n      ['**anime** <anime title> - Searches for an anime']\n    ]\n  }\n\n  genEntry (entry) {\n    this.send(this.channel, [\n      `\\n:mag_right:  **${entry.title}**`,\n      entry.english ? `\\n**English Title**: ${entry.english}` : '\\n',\n      `**Score**: ${entry.score}`,\n      `**Episodes**: ${entry.episodes}`,\n      `**Status**: ${entry.status}`,\n      `**Type**: ${entry.type || 'None'}`,\n      `**Start Date**: ${entry.start_date}`,\n      `**End Date**: ${entry.end_date}`,\n      `**Synopsis**: ${\n        entry.synopsis[0]\n        ? he.decode(entry.synopsis[0])\n        .replace(/<br\\s*[\\/]?>/gi, '')\n        .replace(/\\[\\/*i\\]/gi, '*')\n        .replace(/\\[\\/*b\\]/gi, '**')\n        : 'none'\n      }`,\n      `http://myanimelist.net/anime/${entry.id}`\n    ].join('\\n'))\n  }\n\n  handle () {\n    this.responds(/^anime (.+)$/i, matches => {\n      let query = matches[1].split(' ').join('+')\n      request\n      .get(`http://myanimelist.net/api/anime/search.xml?q=${query}`)\n      .auth(config.user, config.pass)\n      .accept('xml')\n      .buffer(true)\n      .parse(xml2jsParser)\n      .end((err, res) => {\n        if (err) {\n          this.logger.error(`Error fetching MAL DB:\\n`, err)\n          this.reply(`**Error** querying MAL DB: ${err}`)\n          return\n        }\n        if (res.body === null) {\n          this.reply(`No anime by the name **${matches[1]}** could be found.`)\n          return\n        }\n        let entries = res.body.anime.entry\n        if (entries.length === 1) {\n          this.genEntry(entries[0])\n          return\n        }\n        let reply = ['**Please choose your desired show by entering its number:**']\n        entries.forEach((elem, idx) => {\n          reply.push(`${idx + 1}. ${elem.title}`)\n        })\n        this.client.awaitResponse(this.message, reply.join('\\n'))\n        .then(msg => {\n          let num = parseInt(msg.content, 10) - 1\n          if (num >= entries.length) {\n            num = entries.length - 1\n          }\n          this.genEntry(entries[num])\n        })\n      })\n    })\n  }\n}\n\nmodule.exports = Anime\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}