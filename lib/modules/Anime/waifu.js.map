{"version":3,"sources":["modules/Anime/waifu.js"],"names":[],"mappings":"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","file":"modules/Anime/waifu.js","sourcesContent":["import BaseCommand from '../../base/BaseCommand'\nimport img from '../.Cache/ImageFetcher'\nimport DB from '../.Cache/WaifuDB'\n\nclass Waifu extends BaseCommand {\n  static get name () {\n    return 'waifu'\n  }\n\n  static get description () {\n    return 'Finds you a waifu'\n  }\n\n  waifuGet (name, show, url) {\n    this.send(this.channel, `Your waifu is ${name} (${show})\\n${url}`)\n  }\n\n  noPictures (query) {\n    this.logger.error(\n      `**Error**: Query \"${query.split('+').join(', ')}\"` +\n      ` returned no pictures.`\n    )\n    this.getWaifu()\n  }\n\n  fetchGB (res, query, name, show) {\n    let r = []\n    try {\n      r = JSON.parse(res.text)[0]\n    } catch (err) {\n      this.logger.error(`Error fetching '${query}'`, err)\n      this.reply(`Error fetching '${query}' - ${err}`)\n      return\n    }\n    if (r && r.file_url) {\n      if (r.rating === 's') {\n        this.waifuGet(name, show, r.file_url)\n      } else {\n        this.fetchGB(res, query, name, show)\n      }\n      return\n    }\n    return this.reducePage(query, name, show)\n  }\n\n  reducePage (query, name, show) {\n    // Temporary workaround for tags with less than 10000 images\n    img('gelbooru', query, this, `limit=100`)\n    .then(res => {\n      this.fetchGB(res, query, name, show)\n    })\n  }\n\n  gelbooru (name, show) {\n    let query = name.split(' ').join('_')\n    img('gelbooru', query, this, `pid=${Math.floor(Math.random() * 10000)}`)\n    .then(res => {\n      name = name.substring(name.length - 1) === ')'\n      ? name.substring(name.indexOf('('))\n      : name\n      this.fetchGB(res, query, name, show)\n    })\n  }\n\n  yandere (name, show) {\n    let query = name.split(' ').join('_')\n    img('yandere', query, this)\n    .then((res) => {\n      let r = res.body[0]\n      if (typeof r !== 'undefined') {\n        this.waifuGet(name, show, r.file_url)\n      } else {\n        this.gelbooru(name, show)\n      }\n    })\n  }\n\n  handle () {\n    this.responds(/^waifu$/i, () => {\n      let data = DB.Waifus\n      let char = data[Math.floor(Math.random() * data.length)].split(' || ')\n      this.yandere(char[0], char[1])\n    })\n  }\n}\n\nmodule.exports = Waifu\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}