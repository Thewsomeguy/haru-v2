{"version":3,"sources":["modules/Core/eval.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEM,I;;;;;;;;;;;6BAyBM,I,EAAM;AAAA;;AACd,UAAI,gBAAJ;AACA,UAAI,OAAO,IAAX;AACA,WAAK,KAAL,CAAW,iBAAX,EACC,IADD,CACM,eAAO;AACX,kBAAU,GAAV;AACA,mBAAW,YAAM;AACf,cAAI,iBAAJ;AACA,cAAI;AACF,uBAAW,KAAK,IAAL,CAAX;AACD,WAFD,CAEE,OAAO,KAAP,EAAc;AACd,uBAAc,MAAM,OAApB,YAAkC,MAAM,KAAxC;AACD;;AAED,cAAI,MAAM,OAAN,CAAc,QAAd,KAA2B,QAAO,QAAP,yCAAO,QAAP,OAAoB,QAAnD,EAA6D;AAC3D,uBAAW,eAAK,OAAL,CAAa,QAAb,CAAX;AACD;;AAED,iBAAK,MAAL,CAAY,aAAZ,CAA0B,OAA1B,EAAmC,YAAY,QAAZ,GAAuB,OAA1D,EACC,KADD,CACO,eAAO;AACZ,mBAAK,MAAL,CAAY,KAAZ,CAAkB,gCAAlB,EAAoD,GAApD;AACA,mBAAK,MAAL,CAAY,aAAZ,CACE,OADF,EACW,yCAAyC,GAAzC,GAA+C,OAD1D;AAED,WALD;AAMD,SAlBD,EAkBG,GAlBH;AAmBD,OAtBD,EAuBC,KAvBD,CAuBO,KAAK,MAAL,CAAY,KAvBnB;AAwBD;;;6BAES;AAAA;;AACR,WAAK,QAAL,CAAc,yCAAd,EAAyD,UAAC,OAAD,EAAa;AACpE,eAAK,QAAL,CAAc,QAAQ,CAAR,CAAd;AACD,OAFD;;AAIA,WAAK,QAAL,CAAc,2BAAd,EAA2C,UAAC,OAAD,EAAa;AACtD,eAAK,QAAL,CAAc,QAAQ,CAAR,CAAd;AACD,OAFD;AAGD;;;wBA7CgB;AACf,aAAO,IAAP;AACD;;;wBAEa;AACZ,aAAO,IAAP;AACD;;;wBAtBkB;AACjB,aAAO,MAAP;AACD;;;wBAEyB;AACxB,aAAO,0BAAP;AACD;;;wBAEmB;AAClB,aAAO,CACL,KADK,EAEL,CAAC,yCAAD,CAFK,EAGL,KAHK,CAAP;AAKD;;;;;;AAkDH,OAAO,OAAP,GAAiB,IAAjB","file":"modules/Core/eval.js","sourcesContent":["import BaseCommand from '../../base/BaseCommand'\nimport util from 'util'\n\nclass Eval extends BaseCommand {\n  static get name () {\n    return 'eval'\n  }\n\n  static get description () {\n    return 'Evaluates the given code'\n  }\n\n  static get usage () {\n    return [\n      '```',\n      ['eval <code> - Executes eval on the code'],\n      '```'\n    ]\n  }\n\n  get adminOnly () {\n    return true\n  }\n\n  get hidden () {\n    return true\n  }\n\n  evalCode (code) {\n    let message\n    let self = this\n    this.reply('Executing code.')\n    .then(msg => {\n      message = msg\n      setTimeout(() => {\n        let response\n        try {\n          response = eval(code)\n        } catch (error) {\n          response = `${error.message}\\n\\n${error.stack}`\n        }\n\n        if (Array.isArray(response) || typeof response === 'object') {\n          response = util.inspect(response)\n        }\n\n        this.client.updateMessage(message, '```xl\\n' + response + '\\n```')\n        .catch(err => {\n          this.logger.error('Message update for eval failed', err)\n          this.client.updateMessage(\n            message, '```\\nError while updating message:\\n' + err + '\\n```')\n        })\n      }, 500)\n    })\n    .catch(this.logger.error)\n  }\n\n  handle () {\n    this.responds(/^eval(?:\\s+)```[a-z]*\\n([\\s\\S]*)?\\n```$/, (matches) => {\n      this.evalCode(matches[1])\n    })\n\n    this.responds(/^eval(?:\\s+)`?([^`]*)?`?$/, (matches) => {\n      this.evalCode(matches[1])\n    })\n  }\n}\n\nmodule.exports = Eval\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}