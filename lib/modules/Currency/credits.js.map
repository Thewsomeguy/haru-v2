{"version":3,"sources":["modules/Currency/credits.js"],"names":[],"mappings":"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","file":"modules/Currency/credits.js","sourcesContent":["import moment from 'moment'\n\nimport BaseCommand from '../../base/BaseCommand'\nimport { Banker, Claims } from '../.Cache/Bank'\n\nclass Credits extends BaseCommand {\n  static get name () {\n    return 'credits'\n  }\n\n  static get description () {\n    return 'Currency system'\n  }\n\n  static get usage () {\n    return [\n      '```',\n      '== Credits Management System ==',\n      '```',\n      'Credits are a virtual currency that can be used in any server the bot is in.',\n      [\n        '**give** <user> <no. of credits> [message] - Sends credits to a user',\n        '**peek** <user> - Takes a peek at a user\\'s number of credits',\n        '**lb** - Gets the rankings for credit amounts',\n        '**claim** - Claims your daily credits, usable every 24 hours'\n      ]\n    ]\n  }\n\n  generateReceipt (amount, from, to, description) {\n    let receipt = [\n      '```ruby',\n      '=== RECEIPT ===',\n      `FROM: ${from.name}`,\n      `AMOUNT: ${amount} credits`,\n      `FOR: ${to.name}`\n    ]\n    if (description) {\n      receipt.push(`DESCRIPTION:${description}`)\n    }\n    receipt.push('```')\n    return receipt.join('\\n')\n  }\n\n  genTicket (amount, by, to, description) {\n    let receipt = [\n      '```ruby',\n      '=== NOTICE OF CREDIT ADJUSTMENT ===',\n      `BY: ${by.name}`,\n      `FOR: ${to.name}`,\n      `AMOUNT ADJUSTED TO: ${amount} credits`\n    ]\n    if (description) {\n      receipt.push(`DESCRIPTION:${description}`)\n    }\n    receipt.push('```')\n    return receipt.join('\\n')\n  }\n\n  genAdjustment (amount, by, to, description) {\n    let receipt = [\n      '```ruby',\n      '=== NOTICE OF CREDIT ADJUSTMENT ===',\n      `BY: ${by.name}`,\n      `FOR: ${to.name}`,\n      `AMOUNT ADJUSTED BY: ${amount} credits`\n    ]\n    if (description) {\n      receipt.push(`DESCRIPTION:${description}`)\n    }\n    receipt.push('```')\n    return receipt.join('\\n')\n  }\n\n  handle () {\n    this.responds(/^credits$/i, () => {\n      Banker.getUser(this.sender, (err, amt) => {\n        if (err) {\n          this.logger.error(`${this.sender.name} met an error fetching credits`, err)\n          this.reply('Error fetching credits amount:\\n' + err)\n          return\n        }\n        this.send(this.channel,\n          `**${this.sender.name}**'s current balance: :credit_card: **${parseInt(amt, 10)}** credits.`)\n      })\n    })\n\n    this.responds(/^credits (leaderboards|lb|rankings)$/i, () => {\n      Banker.sortRank(10, (err, res) => {\n        if (err) {\n          this.logger.error(`${this.sender.name} met an error fetching credits rankings`, err)\n          this.reply('Error fetching credits leaderboard:\\n' + err)\n          return\n        }\n        let ranking = ['```rb', '== Discord\\'s Wealthiest (Top 10) ==']\n        for (let i = 0, j = 1; i < Math.min(res.length, 20); i += 2, j++) {\n          ranking.push([\n            `${j}. ${this.client.users.get('id', res[i]).name} - ${res[i + 1]} credits`\n          ])\n        }\n        ranking.push('```')\n        this.send(this.channel, ranking.join('\\n'))\n      })\n    })\n\n    this.responds(/^credits (give|send) <@!*(\\d+)> (\\d+)(\\s.+)*$/i, matches => {\n      let amt = parseInt(matches[3], 10)\n      let recipient = this.client.users.get('id', matches[2])\n      if (recipient) {\n        Banker.getUser(this.sender, (err, res) => {\n          if (err) {\n            this.logger.error(`${this.sender.name} met an error fetching credits`, err)\n            this.reply('Error fetching credits amount:\\n' + err)\n            return\n          }\n          if (res) {\n            if (parseInt(res, 10) < amt) {\n              this.send(this.channel,\n                `:information_source:  **${this.sender.name}**, you have insufficient (**${res}**) credits.`)\n              return\n            } else {\n              Banker.delCredits(this.sender, matches[3], (err, res) => {\n                if (err) {\n                  this.logger.error(`${this.sender.name} met an error removing credits`, err)\n                  this.reply('Error removing credits:\\n' + err)\n                  return\n                }\n                Banker.addCredits(matches[2], matches[3], (err, res) => {\n                  if (err) {\n                    this.logger.error(`${this.sender.name} met an error sending credits`, err)\n                    this.reply('Error sending credits:\\n' + err)\n                    return\n                  }\n                  this.send(recipient, this.generateReceipt(amt, this.sender, recipient, matches[4]))\n                  this.send(this.sender, this.generateReceipt(amt, this.sender, recipient, matches[4]))\n                  this.send(this.channel,\n                    `:atm:  **${this.sender.name}**, sent ${recipient.mention()} **${amt}** credits.`)\n                })\n              })\n            }\n          }\n        })\n      }\n    })\n\n    this.responds(/^credits peek <@!*(\\d+)>$/i, matches => {\n      let user = this.client.users.get('id', matches[1])\n      if (user) {\n        Banker.getUser(matches[1], (err, res) => {\n          if (err) {\n            this.logger.error(`${this.sender.name} met an error fetching credits`, err)\n            this.reply('Error fetching credits amount:\\n' + err)\n            return\n          }\n          this.reply(`**${user.name}** has **${parseInt(res, 10)}** credits.`)\n        })\n      }\n    })\n\n    this.responds(/^credits claim/i, () => {\n      Claims.get(this.sender.id, (err, res) => {\n        if (err) {\n          this.logger.error(`${this.sender.name} met an error fetching credit claims DB`, err)\n          this.reply('Error fetching credit claims DB:\\n' + err)\n          return\n        }\n        let amount = Math.floor(Math.random() * 100) + 50\n        if (res) {\n          let diff = moment().diff(moment(res), 'hours')\n          if (diff < 3) {\n            this.send(this.channel,\n              `:information_source:  **${this.sender.name}**, you have recently claimed your free credits.\\n` +\n              `:arrows_counterclockwise:  Check back after **${3 - diff}** hours.`\n            )\n            return\n          } else {\n            Claims.set(this.sender.id, +moment(), (err, res) => {\n              if (err) {\n                this.logger.error(`${this.sender.name} met an error resetting claim timer`, err)\n                this.reply('Error resetting claim timer:\\n' + err)\n                return\n              }\n            })\n            Banker.addCredits(this.sender, amount, (err, res) => {\n              if (err) {\n                this.logger.error(`${this.sender.name} met an error claiming credits`, err)\n                this.reply('Error claiming credits:\\n' + err)\n                return\n              }\n              this.send(this.channel,\n                `:atm:  **${amount}** credits added to **${this.sender.name}**'s account.`\n              )\n            })\n          }\n        } else {\n          Claims.set(this.sender.id, +moment(), (err, res) => {\n            if (err) {\n              this.logger.error(`${this.sender.name} met an error resetting claim timer`, err)\n              this.reply('Error resetting claim timer:\\n' + err)\n              return\n            }\n          })\n          Banker.setCredits(this.sender, amount + 100, (err, res) => {\n            if (err) {\n              this.logger.error(`${this.sender.name} met an error claiming credits`, err)\n              this.reply('Error claiming credits:\\n' + err)\n              return\n            }\n            this.send(this.channel,\n              `:atm:  **${amount}** credits added to **${this.sender.name}**'s account.`\n            )\n          })\n        }\n      })\n    })\n\n    this.responds(/^credits set <@!*(\\d+)> (\\d+)(\\s.+)*$/i, matches => {\n      if (!this.isAdmin) return\n      let user = this.client.users.get('id', matches[1])\n      if (user) {\n        let amount = parseInt(matches[2], 10)\n        Banker.setCredits(matches[1], amount, (err, res) => {\n          if (err) {\n            this.logger.error(`${this.sender.name} met an error setting credits`, err)\n            this.reply('Error setting credits amount:\\n' + err)\n            return\n          }\n          this.send(user, this.genTicket(amount, this.sender, user, matches[3]))\n          this.reply(`Set ${user.mention()}'s account to **${amount}** credits`)\n        })\n      }\n    })\n\n    this.responds(/^credits add <@!*(\\d+)> (\\d+)(\\s.+)*$/i, matches => {\n      if (!this.isAdmin) return\n      let user = this.client.users.get('id', matches[1])\n      if (user) {\n        let amount = parseInt(matches[2], 10)\n        Banker.addCredits(matches[1], amount, (err, res) => {\n          if (err) {\n            this.logger.error(`${this.sender.name} met an error adding credits`, err)\n            this.reply('Error adding credits amount:\\n' + err)\n            return\n          }\n          this.send(user, this.genAdjustment(amount, this.sender, user, matches[3]))\n          this.reply(`Added **${amount}** credits to ${user.mention()}'s account`)\n        })\n      }\n    })\n\n    this.responds(/^credits take <@!*(\\d+)> (\\d+)(\\s.+)*$/i, matches => {\n      if (!this.isAdmin) return\n      let user = this.client.users.get('id', matches[1])\n      if (user) {\n        let amount = parseInt(matches[2], 10)\n        Banker.delCredits(matches[1], amount, (err, res) => {\n          if (err) {\n            this.logger.error(`${this.sender.name} met an error removing credits`, err)\n            this.reply('Error removing credits amount:\\n' + err)\n            return\n          }\n          this.send(user, this.genAdjustment(-amount, this.sender, user, matches[3]))\n          this.reply(`Removed **${amount}** credits from ${user.mention()}'s account`)\n        })\n      }\n    })\n  }\n}\n\nmodule.exports = Credits\n"],"sourceRoot":"/Users/AaronTua/Desktop/code/fuyu/src"}